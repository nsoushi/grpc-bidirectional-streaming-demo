// Code generated by protoc-gen-go.
// source: microservice.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	microservice.proto

It has these top-level messages:
	Request
	Response
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Time    string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Request) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type Response struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Time    string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "proto.Request")
	proto.RegisterType((*Response)(nil), "proto.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MicroService service

type MicroServiceClient interface {
	MicroService(ctx context.Context, opts ...grpc.CallOption) (MicroService_MicroServiceClient, error)
}

type microServiceClient struct {
	cc *grpc.ClientConn
}

func NewMicroServiceClient(cc *grpc.ClientConn) MicroServiceClient {
	return &microServiceClient{cc}
}

func (c *microServiceClient) MicroService(ctx context.Context, opts ...grpc.CallOption) (MicroService_MicroServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MicroService_serviceDesc.Streams[0], c.cc, "/proto.MicroService/MicroService", opts...)
	if err != nil {
		return nil, err
	}
	x := &microServiceMicroServiceClient{stream}
	return x, nil
}

type MicroService_MicroServiceClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type microServiceMicroServiceClient struct {
	grpc.ClientStream
}

func (x *microServiceMicroServiceClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *microServiceMicroServiceClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MicroService service

type MicroServiceServer interface {
	MicroService(MicroService_MicroServiceServer) error
}

func RegisterMicroServiceServer(s *grpc.Server, srv MicroServiceServer) {
	s.RegisterService(&_MicroService_serviceDesc, srv)
}

func _MicroService_MicroService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MicroServiceServer).MicroService(&microServiceMicroServiceServer{stream})
}

type MicroService_MicroServiceServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type microServiceMicroServiceServer struct {
	grpc.ServerStream
}

func (x *microServiceMicroServiceServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *microServiceMicroServiceServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MicroService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MicroService",
	HandlerType: (*MicroServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MicroService",
			Handler:       _MicroService_MicroService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "microservice.proto",
}

func init() { proto.RegisterFile("microservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcd, 0x4c, 0x2e,
	0xca, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x53, 0x4a, 0xde, 0x5c, 0xec, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c,
	0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x04,
	0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x04, 0x13, 0x58, 0x18, 0xc6, 0x05, 0xa9,
	0x2e, 0xc9, 0xcc, 0x4d, 0x95, 0x60, 0x86, 0xa8, 0x06, 0xb1, 0x95, 0x7c, 0xb8, 0x38, 0x82, 0x52,
	0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x29, 0x37, 0xcd, 0xc8, 0x95, 0x8b, 0xc7, 0x17, 0xe4, 0xee,
	0x60, 0x88, 0xbb, 0x85, 0x4c, 0xd1, 0xf8, 0x7c, 0x10, 0x9f, 0xe8, 0x41, 0xdd, 0x2f, 0xc5, 0x0f,
	0xe7, 0x43, 0x9c, 0xa0, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0xc4, 0x15, 0xc5, 0x01, 0x16, 0x4f,
	0x2a, 0x4d, 0x4b, 0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0x5e, 0xfb,
	0x41, 0x11, 0x01, 0x00, 0x00,
}
